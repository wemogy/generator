import BaseDotnetTemplateGenerator from '../BaseDotnetTemplateGenerator';
import { toPascalCase } from '../StringHelpers';

class SdkAutoGenerateDotnetGenerator extends BaseDotnetTemplateGenerator {
  constructor(args: any, options: any) {
    super(args, options);
  }

  // Where you prompt users for options (where youâ€™d call this.prompt())
  public async prompting() {
    this.answers = await this.optionOrPrompt([
      this.slnPrompt,
      {
        type: 'input',
        name: 'webservice',
        message:
          'Which webservice project should be used? (e.g. src/webservices/main/Wemogy.Sample.Webservices.Main.Api)'
      },
      {
        type: 'input',
        name: 'swagger',
        message:
          'Which swagger file should be used? (e.g. src/webservices/main/Wemogy.Sample.Webservices.Main.Api/bin/Release/net6.0/swagger.public.json)'
      },
      {
        type: 'input',
        name: 'targetDirectory',
        message: 'Where should the generated files be placed? (e.g. src/sdk/dotnet/public)'
      },
      {
        type: 'input',
        name: 'name',
        message: 'Project name',
        default: `Wemogy.${toPascalCase(this.appname)}.Sdk.Public`
      },
      {
        type: 'input',
        name: 'description',
        message:
          'Specifies a AssemblyDescription for the .NET Framework global assembly attributes stored in the AssemblyInfo file.',
        default: ''
      }
    ]);
  }

  public install(): void {
    const scriptPath = `"${__dirname}/templates/script.sh"`;

    // Make script executable
    this.spawnCommandSync('chmod', ['+x', scriptPath], { shell: true });

    // Execute script with parameters
    this.spawnCommandSync(
      scriptPath,
      [
        this.getSolutionPath(),
        this.answers.webservice,
        this.answers.swagger,
        this.answers.targetDirectory,
        this.answers.name,
        this.answers.description
      ],
      {
        shell: true
      }
    );
  }
}

export default SdkAutoGenerateDotnetGenerator;
